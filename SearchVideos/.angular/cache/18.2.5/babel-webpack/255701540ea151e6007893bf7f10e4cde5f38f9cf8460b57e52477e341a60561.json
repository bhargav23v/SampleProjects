{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { VideoModel } from '../video/video.model';\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let YoutubeService = /*#__PURE__*/(() => {\n  class YoutubeService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'https://www.googleapis.com/youtube/v3/search';\n      this.key = 'AIzaSyBazul_vk-tg-akYPPomWWgBzohJ_lG--I';\n    }\n    search(query) {\n      const url = `${this.baseUrl}?q=${query}&key=${this.key}&part=snippet&type=video&maxResults=20`;\n      return this.http.get(url).pipe(map(this.transformFunction), catchError(error => {\n        console.error('Error fetching data from YouTube API', error);\n        return of([]); // Return an empty array or handle it as needed\n      }));\n    }\n    transformFunction(response) {\n      const items = response.items;\n      return items.map(item => {\n        const id = _.get(item, 'id.videoId');\n        const snippet = _.get(item, 'snippet');\n        const thumbnailurl = _.get(snippet, 'thumbnails.high.url');\n        const title = _.get(snippet, 'title');\n        const description = _.get(snippet, 'description');\n        const obj = {\n          id,\n          snippet,\n          thumbnailurl,\n          title,\n          description\n        };\n        const videoModel = new VideoModel(obj);\n        return videoModel;\n      });\n    }\n    static {\n      this.ɵfac = function YoutubeService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || YoutubeService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: YoutubeService,\n        factory: YoutubeService.ɵfac\n      });\n    }\n  }\n  return YoutubeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}