{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthErrorInterceptor = /*#__PURE__*/(() => {\n  class AuthErrorInterceptor {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(err => this.onError(err)));\n    }\n    onError(err) {\n      const statusCode = err.status;\n      if (statusCode === 403) {\n        this.authService.logout();\n        alert(' UnAuthorized Access');\n        // display error to user\n        this.router.navigate(['/login']);\n      }\n      const msg = err.error.message || err.statusText;\n      return throwError(msg);\n    }\n    static {\n      this.ɵfac = function AuthErrorInterceptor_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AuthErrorInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthErrorInterceptor,\n        factory: AuthErrorInterceptor.ɵfac\n      });\n    }\n  }\n  return AuthErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}